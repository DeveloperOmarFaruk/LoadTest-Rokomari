/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 62.0, "minX": 0.0, "maxY": 57143.0, "series": [{"data": [[0.0, 193.0], [0.1, 193.0], [0.2, 193.0], [0.3, 193.0], [0.4, 193.0], [0.5, 194.0], [0.6, 194.0], [0.7, 194.0], [0.8, 194.0], [0.9, 194.0], [1.0, 195.0], [1.1, 195.0], [1.2, 195.0], [1.3, 195.0], [1.4, 195.0], [1.5, 196.0], [1.6, 196.0], [1.7, 196.0], [1.8, 196.0], [1.9, 196.0], [2.0, 196.0], [2.1, 196.0], [2.2, 196.0], [2.3, 196.0], [2.4, 197.0], [2.5, 197.0], [2.6, 197.0], [2.7, 197.0], [2.8, 197.0], [2.9, 197.0], [3.0, 197.0], [3.1, 197.0], [3.2, 197.0], [3.3, 197.0], [3.4, 198.0], [3.5, 198.0], [3.6, 198.0], [3.7, 198.0], [3.8, 198.0], [3.9, 198.0], [4.0, 198.0], [4.1, 198.0], [4.2, 198.0], [4.3, 198.0], [4.4, 198.0], [4.5, 198.0], [4.6, 198.0], [4.7, 198.0], [4.8, 201.0], [4.9, 201.0], [5.0, 201.0], [5.1, 201.0], [5.2, 201.0], [5.3, 205.0], [5.4, 205.0], [5.5, 205.0], [5.6, 205.0], [5.7, 205.0], [5.8, 208.0], [5.9, 208.0], [6.0, 208.0], [6.1, 208.0], [6.2, 220.0], [6.3, 220.0], [6.4, 220.0], [6.5, 220.0], [6.6, 220.0], [6.7, 239.0], [6.8, 239.0], [6.9, 239.0], [7.0, 239.0], [7.1, 239.0], [7.2, 248.0], [7.3, 248.0], [7.4, 248.0], [7.5, 248.0], [7.6, 248.0], [7.7, 254.0], [7.8, 254.0], [7.9, 254.0], [8.0, 254.0], [8.1, 284.0], [8.2, 284.0], [8.3, 284.0], [8.4, 284.0], [8.5, 284.0], [8.6, 302.0], [8.7, 302.0], [8.8, 302.0], [8.9, 302.0], [9.0, 302.0], [9.1, 313.0], [9.2, 313.0], [9.3, 313.0], [9.4, 313.0], [9.5, 313.0], [9.6, 325.0], [9.7, 325.0], [9.8, 325.0], [9.9, 325.0], [10.0, 350.0], [10.1, 350.0], [10.2, 350.0], [10.3, 350.0], [10.4, 350.0], [10.5, 366.0], [10.6, 366.0], [10.7, 366.0], [10.8, 366.0], [10.9, 366.0], [11.0, 412.0], [11.1, 412.0], [11.2, 412.0], [11.3, 412.0], [11.4, 412.0], [11.5, 431.0], [11.6, 431.0], [11.7, 431.0], [11.8, 431.0], [11.9, 431.0], [12.0, 460.0], [12.1, 460.0], [12.2, 460.0], [12.3, 460.0], [12.4, 462.0], [12.5, 462.0], [12.6, 462.0], [12.7, 462.0], [12.8, 462.0], [12.9, 468.0], [13.0, 468.0], [13.1, 468.0], [13.2, 468.0], [13.3, 468.0], [13.4, 508.0], [13.5, 508.0], [13.6, 508.0], [13.7, 508.0], [13.8, 508.0], [13.9, 535.0], [14.0, 535.0], [14.1, 535.0], [14.2, 535.0], [14.3, 610.0], [14.4, 610.0], [14.5, 610.0], [14.6, 610.0], [14.7, 610.0], [14.8, 731.0], [14.9, 731.0], [15.0, 731.0], [15.1, 731.0], [15.2, 731.0], [15.3, 782.0], [15.4, 782.0], [15.5, 782.0], [15.6, 782.0], [15.7, 782.0], [15.8, 825.0], [15.9, 825.0], [16.0, 825.0], [16.1, 825.0], [16.2, 858.0], [16.3, 858.0], [16.4, 858.0], [16.5, 858.0], [16.6, 858.0], [16.7, 863.0], [16.8, 863.0], [16.9, 863.0], [17.0, 863.0], [17.1, 863.0], [17.2, 864.0], [17.3, 864.0], [17.4, 864.0], [17.5, 864.0], [17.6, 864.0], [17.7, 918.0], [17.8, 918.0], [17.9, 918.0], [18.0, 918.0], [18.1, 922.0], [18.2, 922.0], [18.3, 922.0], [18.4, 922.0], [18.5, 922.0], [18.6, 936.0], [18.7, 936.0], [18.8, 936.0], [18.9, 936.0], [19.0, 936.0], [19.1, 966.0], [19.2, 966.0], [19.3, 966.0], [19.4, 966.0], [19.5, 966.0], [19.6, 980.0], [19.7, 980.0], [19.8, 980.0], [19.9, 980.0], [20.0, 1042.0], [20.1, 1042.0], [20.2, 1042.0], [20.3, 1042.0], [20.4, 1042.0], [20.5, 1044.0], [20.6, 1044.0], [20.7, 1044.0], [20.8, 1044.0], [20.9, 1044.0], [21.0, 1090.0], [21.1, 1090.0], [21.2, 1090.0], [21.3, 1090.0], [21.4, 1090.0], [21.5, 1124.0], [21.6, 1124.0], [21.7, 1124.0], [21.8, 1124.0], [21.9, 1124.0], [22.0, 1129.0], [22.1, 1129.0], [22.2, 1129.0], [22.3, 1129.0], [22.4, 1242.0], [22.5, 1242.0], [22.6, 1242.0], [22.7, 1242.0], [22.8, 1242.0], [22.9, 1296.0], [23.0, 1296.0], [23.1, 1296.0], [23.2, 1296.0], [23.3, 1296.0], [23.4, 1366.0], [23.5, 1366.0], [23.6, 1366.0], [23.7, 1366.0], [23.8, 1366.0], [23.9, 1445.0], [24.0, 1445.0], [24.1, 1445.0], [24.2, 1445.0], [24.3, 1520.0], [24.4, 1520.0], [24.5, 1520.0], [24.6, 1520.0], [24.7, 1520.0], [24.8, 1525.0], [24.9, 1525.0], [25.0, 1525.0], [25.1, 1525.0], [25.2, 1525.0], [25.3, 1536.0], [25.4, 1536.0], [25.5, 1536.0], [25.6, 1536.0], [25.7, 1536.0], [25.8, 1592.0], [25.9, 1592.0], [26.0, 1592.0], [26.1, 1592.0], [26.2, 1605.0], [26.3, 1605.0], [26.4, 1605.0], [26.5, 1605.0], [26.6, 1605.0], [26.7, 1609.0], [26.8, 1609.0], [26.9, 1609.0], [27.0, 1609.0], [27.1, 1609.0], [27.2, 1615.0], [27.3, 1615.0], [27.4, 1615.0], [27.5, 1615.0], [27.6, 1615.0], [27.7, 1640.0], [27.8, 1640.0], [27.9, 1640.0], [28.0, 1640.0], [28.1, 1642.0], [28.2, 1642.0], [28.3, 1642.0], [28.4, 1642.0], [28.5, 1642.0], [28.6, 1688.0], [28.7, 1688.0], [28.8, 1688.0], [28.9, 1688.0], [29.0, 1688.0], [29.1, 1721.0], [29.2, 1721.0], [29.3, 1721.0], [29.4, 1721.0], [29.5, 1721.0], [29.6, 1757.0], [29.7, 1757.0], [29.8, 1757.0], [29.9, 1757.0], [30.0, 1774.0], [30.1, 1774.0], [30.2, 1774.0], [30.3, 1774.0], [30.4, 1774.0], [30.5, 1781.0], [30.6, 1781.0], [30.7, 1781.0], [30.8, 1781.0], [30.9, 1781.0], [31.0, 1785.0], [31.1, 1785.0], [31.2, 1785.0], [31.3, 1785.0], [31.4, 1785.0], [31.5, 1823.0], [31.6, 1823.0], [31.7, 1823.0], [31.8, 1823.0], [31.9, 1823.0], [32.0, 1830.0], [32.1, 1830.0], [32.2, 1830.0], [32.3, 1830.0], [32.4, 1847.0], [32.5, 1847.0], [32.6, 1847.0], [32.7, 1847.0], [32.8, 1847.0], [32.9, 1859.0], [33.0, 1859.0], [33.1, 1859.0], [33.2, 1859.0], [33.3, 1859.0], [33.4, 1918.0], [33.5, 1918.0], [33.6, 1918.0], [33.7, 1918.0], [33.8, 1918.0], [33.9, 1934.0], [34.0, 1934.0], [34.1, 1934.0], [34.2, 1934.0], [34.3, 1983.0], [34.4, 1983.0], [34.5, 1983.0], [34.6, 1983.0], [34.7, 1983.0], [34.8, 2041.0], [34.9, 2041.0], [35.0, 2041.0], [35.1, 2041.0], [35.2, 2041.0], [35.3, 2065.0], [35.4, 2065.0], [35.5, 2065.0], [35.6, 2065.0], [35.7, 2065.0], [35.8, 2113.0], [35.9, 2113.0], [36.0, 2113.0], [36.1, 2113.0], [36.2, 2145.0], [36.3, 2145.0], [36.4, 2145.0], [36.5, 2145.0], [36.6, 2145.0], [36.7, 2161.0], [36.8, 2161.0], [36.9, 2161.0], [37.0, 2161.0], [37.1, 2161.0], [37.2, 2191.0], [37.3, 2191.0], [37.4, 2191.0], [37.5, 2191.0], [37.6, 2191.0], [37.7, 2200.0], [37.8, 2200.0], [37.9, 2200.0], [38.0, 2200.0], [38.1, 2269.0], [38.2, 2269.0], [38.3, 2269.0], [38.4, 2269.0], [38.5, 2269.0], [38.6, 2269.0], [38.7, 2269.0], [38.8, 2269.0], [38.9, 2269.0], [39.0, 2269.0], [39.1, 2271.0], [39.2, 2271.0], [39.3, 2271.0], [39.4, 2271.0], [39.5, 2271.0], [39.6, 2335.0], [39.7, 2335.0], [39.8, 2335.0], [39.9, 2335.0], [40.0, 2353.0], [40.1, 2353.0], [40.2, 2353.0], [40.3, 2353.0], [40.4, 2353.0], [40.5, 2376.0], [40.6, 2376.0], [40.7, 2376.0], [40.8, 2376.0], [40.9, 2376.0], [41.0, 2379.0], [41.1, 2379.0], [41.2, 2379.0], [41.3, 2379.0], [41.4, 2379.0], [41.5, 2391.0], [41.6, 2391.0], [41.7, 2391.0], [41.8, 2391.0], [41.9, 2391.0], [42.0, 2392.0], [42.1, 2392.0], [42.2, 2392.0], [42.3, 2392.0], [42.4, 2392.0], [42.5, 2392.0], [42.6, 2392.0], [42.7, 2392.0], [42.8, 2392.0], [42.9, 2414.0], [43.0, 2414.0], [43.1, 2414.0], [43.2, 2414.0], [43.3, 2414.0], [43.4, 2451.0], [43.5, 2451.0], [43.6, 2451.0], [43.7, 2451.0], [43.8, 2451.0], [43.9, 2470.0], [44.0, 2470.0], [44.1, 2470.0], [44.2, 2470.0], [44.3, 2500.0], [44.4, 2500.0], [44.5, 2500.0], [44.6, 2500.0], [44.7, 2500.0], [44.8, 2539.0], [44.9, 2539.0], [45.0, 2539.0], [45.1, 2539.0], [45.2, 2539.0], [45.3, 2547.0], [45.4, 2547.0], [45.5, 2547.0], [45.6, 2547.0], [45.7, 2547.0], [45.8, 2549.0], [45.9, 2549.0], [46.0, 2549.0], [46.1, 2549.0], [46.2, 2558.0], [46.3, 2558.0], [46.4, 2558.0], [46.5, 2558.0], [46.6, 2558.0], [46.7, 2581.0], [46.8, 2581.0], [46.9, 2581.0], [47.0, 2581.0], [47.1, 2581.0], [47.2, 2646.0], [47.3, 2646.0], [47.4, 2646.0], [47.5, 2646.0], [47.6, 2646.0], [47.7, 2650.0], [47.8, 2650.0], [47.9, 2650.0], [48.0, 2650.0], [48.1, 2745.0], [48.2, 2745.0], [48.3, 2745.0], [48.4, 2745.0], [48.5, 2745.0], [48.6, 2778.0], [48.7, 2778.0], [48.8, 2778.0], [48.9, 2778.0], [49.0, 2778.0], [49.1, 2808.0], [49.2, 2808.0], [49.3, 2808.0], [49.4, 2808.0], [49.5, 2808.0], [49.6, 2814.0], [49.7, 2814.0], [49.8, 2814.0], [49.9, 2814.0], [50.0, 2906.0], [50.1, 2906.0], [50.2, 2906.0], [50.3, 2906.0], [50.4, 2906.0], [50.5, 2929.0], [50.6, 2929.0], [50.7, 2929.0], [50.8, 2929.0], [50.9, 2929.0], [51.0, 2943.0], [51.1, 2943.0], [51.2, 2943.0], [51.3, 2943.0], [51.4, 2943.0], [51.5, 2954.0], [51.6, 2954.0], [51.7, 2954.0], [51.8, 2954.0], [51.9, 2954.0], [52.0, 3070.0], [52.1, 3070.0], [52.2, 3070.0], [52.3, 3070.0], [52.4, 3071.0], [52.5, 3071.0], [52.6, 3071.0], [52.7, 3071.0], [52.8, 3071.0], [52.9, 3100.0], [53.0, 3100.0], [53.1, 3100.0], [53.2, 3100.0], [53.3, 3100.0], [53.4, 3151.0], [53.5, 3151.0], [53.6, 3151.0], [53.7, 3151.0], [53.8, 3151.0], [53.9, 3239.0], [54.0, 3239.0], [54.1, 3239.0], [54.2, 3239.0], [54.3, 3295.0], [54.4, 3295.0], [54.5, 3295.0], [54.6, 3295.0], [54.7, 3295.0], [54.8, 3306.0], [54.9, 3306.0], [55.0, 3306.0], [55.1, 3306.0], [55.2, 3306.0], [55.3, 3396.0], [55.4, 3396.0], [55.5, 3396.0], [55.6, 3396.0], [55.7, 3396.0], [55.8, 3405.0], [55.9, 3405.0], [56.0, 3405.0], [56.1, 3405.0], [56.2, 3468.0], [56.3, 3468.0], [56.4, 3468.0], [56.5, 3468.0], [56.6, 3468.0], [56.7, 3518.0], [56.8, 3518.0], [56.9, 3518.0], [57.0, 3518.0], [57.1, 3518.0], [57.2, 3541.0], [57.3, 3541.0], [57.4, 3541.0], [57.5, 3541.0], [57.6, 3541.0], [57.7, 3549.0], [57.8, 3549.0], [57.9, 3549.0], [58.0, 3549.0], [58.1, 3575.0], [58.2, 3575.0], [58.3, 3575.0], [58.4, 3575.0], [58.5, 3575.0], [58.6, 3584.0], [58.7, 3584.0], [58.8, 3584.0], [58.9, 3584.0], [59.0, 3584.0], [59.1, 3662.0], [59.2, 3662.0], [59.3, 3662.0], [59.4, 3662.0], [59.5, 3662.0], [59.6, 3672.0], [59.7, 3672.0], [59.8, 3672.0], [59.9, 3672.0], [60.0, 3684.0], [60.1, 3684.0], [60.2, 3684.0], [60.3, 3684.0], [60.4, 3684.0], [60.5, 3712.0], [60.6, 3712.0], [60.7, 3712.0], [60.8, 3712.0], [60.9, 3712.0], [61.0, 3713.0], [61.1, 3713.0], [61.2, 3713.0], [61.3, 3713.0], [61.4, 3713.0], [61.5, 3714.0], [61.6, 3714.0], [61.7, 3714.0], [61.8, 3714.0], [61.9, 3714.0], [62.0, 3766.0], [62.1, 3766.0], [62.2, 3766.0], [62.3, 3766.0], [62.4, 3800.0], [62.5, 3800.0], [62.6, 3800.0], [62.7, 3800.0], [62.8, 3800.0], [62.9, 3804.0], [63.0, 3804.0], [63.1, 3804.0], [63.2, 3804.0], [63.3, 3804.0], [63.4, 3926.0], [63.5, 3926.0], [63.6, 3926.0], [63.7, 3926.0], [63.8, 3926.0], [63.9, 3947.0], [64.0, 3947.0], [64.1, 3947.0], [64.2, 3947.0], [64.3, 3969.0], [64.4, 3969.0], [64.5, 3969.0], [64.6, 3969.0], [64.7, 3969.0], [64.8, 4012.0], [64.9, 4012.0], [65.0, 4012.0], [65.1, 4012.0], [65.2, 4012.0], [65.3, 4021.0], [65.4, 4021.0], [65.5, 4021.0], [65.6, 4021.0], [65.7, 4021.0], [65.8, 4070.0], [65.9, 4070.0], [66.0, 4070.0], [66.1, 4070.0], [66.2, 4088.0], [66.3, 4088.0], [66.4, 4088.0], [66.5, 4088.0], [66.6, 4088.0], [66.7, 4151.0], [66.8, 4151.0], [66.9, 4151.0], [67.0, 4151.0], [67.1, 4151.0], [67.2, 4291.0], [67.3, 4291.0], [67.4, 4291.0], [67.5, 4291.0], [67.6, 4291.0], [67.7, 4367.0], [67.8, 4367.0], [67.9, 4367.0], [68.0, 4367.0], [68.1, 4554.0], [68.2, 4554.0], [68.3, 4554.0], [68.4, 4554.0], [68.5, 4554.0], [68.6, 4599.0], [68.7, 4599.0], [68.8, 4599.0], [68.9, 4599.0], [69.0, 4599.0], [69.1, 4631.0], [69.2, 4631.0], [69.3, 4631.0], [69.4, 4631.0], [69.5, 4631.0], [69.6, 4633.0], [69.7, 4633.0], [69.8, 4633.0], [69.9, 4633.0], [70.0, 4703.0], [70.1, 4703.0], [70.2, 4703.0], [70.3, 4703.0], [70.4, 4703.0], [70.5, 4798.0], [70.6, 4798.0], [70.7, 4798.0], [70.8, 4798.0], [70.9, 4798.0], [71.0, 4799.0], [71.1, 4799.0], [71.2, 4799.0], [71.3, 4799.0], [71.4, 4799.0], [71.5, 4812.0], [71.6, 4812.0], [71.7, 4812.0], [71.8, 4812.0], [71.9, 4812.0], [72.0, 4867.0], [72.1, 4867.0], [72.2, 4867.0], [72.3, 4867.0], [72.4, 4928.0], [72.5, 4928.0], [72.6, 4928.0], [72.7, 4928.0], [72.8, 4928.0], [72.9, 5031.0], [73.0, 5031.0], [73.1, 5031.0], [73.2, 5031.0], [73.3, 5031.0], [73.4, 5039.0], [73.5, 5039.0], [73.6, 5039.0], [73.7, 5039.0], [73.8, 5039.0], [73.9, 5152.0], [74.0, 5152.0], [74.1, 5152.0], [74.2, 5152.0], [74.3, 5178.0], [74.4, 5178.0], [74.5, 5178.0], [74.6, 5178.0], [74.7, 5178.0], [74.8, 5233.0], [74.9, 5233.0], [75.0, 5233.0], [75.1, 5233.0], [75.2, 5233.0], [75.3, 5325.0], [75.4, 5325.0], [75.5, 5325.0], [75.6, 5325.0], [75.7, 5325.0], [75.8, 5514.0], [75.9, 5514.0], [76.0, 5514.0], [76.1, 5514.0], [76.2, 5520.0], [76.3, 5520.0], [76.4, 5520.0], [76.5, 5520.0], [76.6, 5520.0], [76.7, 5536.0], [76.8, 5536.0], [76.9, 5536.0], [77.0, 5536.0], [77.1, 5536.0], [77.2, 5553.0], [77.3, 5553.0], [77.4, 5553.0], [77.5, 5553.0], [77.6, 5553.0], [77.7, 5643.0], [77.8, 5643.0], [77.9, 5643.0], [78.0, 5643.0], [78.1, 5687.0], [78.2, 5687.0], [78.3, 5687.0], [78.4, 5687.0], [78.5, 5687.0], [78.6, 5696.0], [78.7, 5696.0], [78.8, 5696.0], [78.9, 5696.0], [79.0, 5696.0], [79.1, 5724.0], [79.2, 5724.0], [79.3, 5724.0], [79.4, 5724.0], [79.5, 5724.0], [79.6, 5861.0], [79.7, 5861.0], [79.8, 5861.0], [79.9, 5861.0], [80.0, 5861.0], [80.1, 5933.0], [80.2, 5933.0], [80.3, 5933.0], [80.4, 5933.0], [80.5, 6126.0], [80.6, 6126.0], [80.7, 6126.0], [80.8, 6126.0], [80.9, 6126.0], [81.0, 6156.0], [81.1, 6156.0], [81.2, 6156.0], [81.3, 6156.0], [81.4, 6156.0], [81.5, 6268.0], [81.6, 6268.0], [81.7, 6268.0], [81.8, 6268.0], [81.9, 6268.0], [82.0, 6296.0], [82.1, 6296.0], [82.2, 6296.0], [82.3, 6296.0], [82.4, 6394.0], [82.5, 6394.0], [82.6, 6394.0], [82.7, 6394.0], [82.8, 6394.0], [82.9, 6458.0], [83.0, 6458.0], [83.1, 6458.0], [83.2, 6458.0], [83.3, 6458.0], [83.4, 6512.0], [83.5, 6512.0], [83.6, 6512.0], [83.7, 6512.0], [83.8, 6512.0], [83.9, 6662.0], [84.0, 6662.0], [84.1, 6662.0], [84.2, 6662.0], [84.3, 6784.0], [84.4, 6784.0], [84.5, 6784.0], [84.6, 6784.0], [84.7, 6784.0], [84.8, 7020.0], [84.9, 7020.0], [85.0, 7020.0], [85.1, 7020.0], [85.2, 7020.0], [85.3, 7024.0], [85.4, 7024.0], [85.5, 7024.0], [85.6, 7024.0], [85.7, 7024.0], [85.8, 7279.0], [85.9, 7279.0], [86.0, 7279.0], [86.1, 7279.0], [86.2, 7298.0], [86.3, 7298.0], [86.4, 7298.0], [86.5, 7298.0], [86.6, 7298.0], [86.7, 7370.0], [86.8, 7370.0], [86.9, 7370.0], [87.0, 7370.0], [87.1, 7370.0], [87.2, 7874.0], [87.3, 7874.0], [87.4, 7874.0], [87.5, 7874.0], [87.6, 7874.0], [87.7, 7973.0], [87.8, 7973.0], [87.9, 7973.0], [88.0, 7973.0], [88.1, 7990.0], [88.2, 7990.0], [88.3, 7990.0], [88.4, 7990.0], [88.5, 7990.0], [88.6, 8050.0], [88.7, 8050.0], [88.8, 8050.0], [88.9, 8050.0], [89.0, 8050.0], [89.1, 8128.0], [89.2, 8128.0], [89.3, 8128.0], [89.4, 8128.0], [89.5, 8128.0], [89.6, 8346.0], [89.7, 8346.0], [89.8, 8346.0], [89.9, 8346.0], [90.0, 8346.0], [90.1, 8591.0], [90.2, 8591.0], [90.3, 8591.0], [90.4, 8591.0], [90.5, 9112.0], [90.6, 9112.0], [90.7, 9112.0], [90.8, 9112.0], [90.9, 9112.0], [91.0, 9324.0], [91.1, 9324.0], [91.2, 9324.0], [91.3, 9324.0], [91.4, 9324.0], [91.5, 9476.0], [91.6, 9476.0], [91.7, 9476.0], [91.8, 9476.0], [91.9, 9476.0], [92.0, 9665.0], [92.1, 9665.0], [92.2, 9665.0], [92.3, 9665.0], [92.4, 10463.0], [92.5, 10463.0], [92.6, 10463.0], [92.7, 10463.0], [92.8, 10463.0], [92.9, 10831.0], [93.0, 10831.0], [93.1, 10831.0], [93.2, 10831.0], [93.3, 10831.0], [93.4, 10923.0], [93.5, 10923.0], [93.6, 10923.0], [93.7, 10923.0], [93.8, 10923.0], [93.9, 13697.0], [94.0, 13697.0], [94.1, 13697.0], [94.2, 13697.0], [94.3, 14350.0], [94.4, 14350.0], [94.5, 14350.0], [94.6, 14350.0], [94.7, 14350.0], [94.8, 17064.0], [94.9, 17064.0], [95.0, 17064.0], [95.1, 17064.0], [95.2, 17064.0], [95.3, 17340.0], [95.4, 17340.0], [95.5, 17340.0], [95.6, 17340.0], [95.7, 17340.0], [95.8, 19669.0], [95.9, 19669.0], [96.0, 19669.0], [96.1, 19669.0], [96.2, 28202.0], [96.3, 28202.0], [96.4, 28202.0], [96.5, 28202.0], [96.6, 28202.0], [96.7, 28544.0], [96.8, 28544.0], [96.9, 28544.0], [97.0, 28544.0], [97.1, 28544.0], [97.2, 28664.0], [97.3, 28664.0], [97.4, 28664.0], [97.5, 28664.0], [97.6, 28664.0], [97.7, 28797.0], [97.8, 28797.0], [97.9, 28797.0], [98.0, 28797.0], [98.1, 29226.0], [98.2, 29226.0], [98.3, 29226.0], [98.4, 29226.0], [98.5, 29226.0], [98.6, 29243.0], [98.7, 29243.0], [98.8, 29243.0], [98.9, 29243.0], [99.0, 29243.0], [99.1, 31052.0], [99.2, 31052.0], [99.3, 31052.0], [99.4, 31052.0], [99.5, 31052.0], [99.6, 56703.0], [99.7, 56703.0], [99.8, 56703.0], [99.9, 56703.0], [100.0, 56703.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 62.0], [0.1, 62.0], [0.2, 62.0], [0.3, 62.0], [0.4, 62.0], [0.5, 63.0], [0.6, 63.0], [0.7, 63.0], [0.8, 63.0], [0.9, 63.0], [1.0, 63.0], [1.1, 63.0], [1.2, 63.0], [1.3, 63.0], [1.4, 63.0], [1.5, 63.0], [1.6, 63.0], [1.7, 63.0], [1.8, 63.0], [1.9, 63.0], [2.0, 63.0], [2.1, 63.0], [2.2, 63.0], [2.3, 63.0], [2.4, 63.0], [2.5, 63.0], [2.6, 63.0], [2.7, 63.0], [2.8, 63.0], [2.9, 63.0], [3.0, 63.0], [3.1, 63.0], [3.2, 63.0], [3.3, 63.0], [3.4, 64.0], [3.5, 64.0], [3.6, 64.0], [3.7, 64.0], [3.8, 64.0], [3.9, 64.0], [4.0, 64.0], [4.1, 64.0], [4.2, 64.0], [4.3, 64.0], [4.4, 64.0], [4.5, 64.0], [4.6, 64.0], [4.7, 64.0], [4.8, 64.0], [4.9, 64.0], [5.0, 64.0], [5.1, 64.0], [5.2, 64.0], [5.3, 65.0], [5.4, 65.0], [5.5, 65.0], [5.6, 65.0], [5.7, 65.0], [5.8, 65.0], [5.9, 65.0], [6.0, 65.0], [6.1, 65.0], [6.2, 65.0], [6.3, 65.0], [6.4, 65.0], [6.5, 65.0], [6.6, 65.0], [6.7, 65.0], [6.8, 65.0], [6.9, 65.0], [7.0, 65.0], [7.1, 65.0], [7.2, 66.0], [7.3, 66.0], [7.4, 66.0], [7.5, 66.0], [7.6, 66.0], [7.7, 67.0], [7.8, 67.0], [7.9, 67.0], [8.0, 67.0], [8.1, 69.0], [8.2, 69.0], [8.3, 69.0], [8.4, 69.0], [8.5, 69.0], [8.6, 69.0], [8.7, 69.0], [8.8, 69.0], [8.9, 69.0], [9.0, 69.0], [9.1, 70.0], [9.2, 70.0], [9.3, 70.0], [9.4, 70.0], [9.5, 70.0], [9.6, 71.0], [9.7, 71.0], [9.8, 71.0], [9.9, 71.0], [10.0, 72.0], [10.1, 72.0], [10.2, 72.0], [10.3, 72.0], [10.4, 72.0], [10.5, 72.0], [10.6, 72.0], [10.7, 72.0], [10.8, 72.0], [10.9, 72.0], [11.0, 72.0], [11.1, 72.0], [11.2, 72.0], [11.3, 72.0], [11.4, 72.0], [11.5, 72.0], [11.6, 72.0], [11.7, 72.0], [11.8, 72.0], [11.9, 72.0], [12.0, 72.0], [12.1, 72.0], [12.2, 72.0], [12.3, 72.0], [12.4, 72.0], [12.5, 72.0], [12.6, 72.0], [12.7, 72.0], [12.8, 72.0], [12.9, 72.0], [13.0, 72.0], [13.1, 72.0], [13.2, 72.0], [13.3, 72.0], [13.4, 72.0], [13.5, 72.0], [13.6, 72.0], [13.7, 72.0], [13.8, 72.0], [13.9, 72.0], [14.0, 72.0], [14.1, 72.0], [14.2, 72.0], [14.3, 72.0], [14.4, 72.0], [14.5, 72.0], [14.6, 72.0], [14.7, 72.0], [14.8, 72.0], [14.9, 72.0], [15.0, 72.0], [15.1, 72.0], [15.2, 72.0], [15.3, 72.0], [15.4, 72.0], [15.5, 72.0], [15.6, 72.0], [15.7, 72.0], [15.8, 72.0], [15.9, 72.0], [16.0, 72.0], [16.1, 72.0], [16.2, 73.0], [16.3, 73.0], [16.4, 73.0], [16.5, 73.0], [16.6, 73.0], [16.7, 73.0], [16.8, 73.0], [16.9, 73.0], [17.0, 73.0], [17.1, 73.0], [17.2, 73.0], [17.3, 73.0], [17.4, 73.0], [17.5, 73.0], [17.6, 73.0], [17.7, 73.0], [17.8, 73.0], [17.9, 73.0], [18.0, 73.0], [18.1, 73.0], [18.2, 73.0], [18.3, 73.0], [18.4, 73.0], [18.5, 73.0], [18.6, 73.0], [18.7, 73.0], [18.8, 73.0], [18.9, 73.0], [19.0, 73.0], [19.1, 73.0], [19.2, 73.0], [19.3, 73.0], [19.4, 73.0], [19.5, 73.0], [19.6, 73.0], [19.7, 73.0], [19.8, 73.0], [19.9, 73.0], [20.0, 73.0], [20.1, 73.0], [20.2, 73.0], [20.3, 73.0], [20.4, 73.0], [20.5, 73.0], [20.6, 73.0], [20.7, 73.0], [20.8, 73.0], [20.9, 73.0], [21.0, 73.0], [21.1, 73.0], [21.2, 73.0], [21.3, 73.0], [21.4, 73.0], [21.5, 73.0], [21.6, 73.0], [21.7, 73.0], [21.8, 73.0], [21.9, 73.0], [22.0, 73.0], [22.1, 73.0], [22.2, 73.0], [22.3, 73.0], [22.4, 73.0], [22.5, 73.0], [22.6, 73.0], [22.7, 73.0], [22.8, 73.0], [22.9, 73.0], [23.0, 73.0], [23.1, 73.0], [23.2, 73.0], [23.3, 73.0], [23.4, 73.0], [23.5, 73.0], [23.6, 73.0], [23.7, 73.0], [23.8, 73.0], [23.9, 73.0], [24.0, 73.0], [24.1, 73.0], [24.2, 73.0], [24.3, 73.0], [24.4, 73.0], [24.5, 73.0], [24.6, 73.0], [24.7, 73.0], [24.8, 73.0], [24.9, 73.0], [25.0, 73.0], [25.1, 73.0], [25.2, 73.0], [25.3, 74.0], [25.4, 74.0], [25.5, 74.0], [25.6, 74.0], [25.7, 74.0], [25.8, 74.0], [25.9, 74.0], [26.0, 74.0], [26.1, 74.0], [26.2, 74.0], [26.3, 74.0], [26.4, 74.0], [26.5, 74.0], [26.6, 74.0], [26.7, 74.0], [26.8, 74.0], [26.9, 74.0], [27.0, 74.0], [27.1, 74.0], [27.2, 74.0], [27.3, 74.0], [27.4, 74.0], [27.5, 74.0], [27.6, 74.0], [27.7, 74.0], [27.8, 74.0], [27.9, 74.0], [28.0, 74.0], [28.1, 74.0], [28.2, 74.0], [28.3, 74.0], [28.4, 74.0], [28.5, 74.0], [28.6, 74.0], [28.7, 74.0], [28.8, 74.0], [28.9, 74.0], [29.0, 74.0], [29.1, 74.0], [29.2, 74.0], [29.3, 74.0], [29.4, 74.0], [29.5, 74.0], [29.6, 74.0], [29.7, 74.0], [29.8, 74.0], [29.9, 74.0], [30.0, 74.0], [30.1, 74.0], [30.2, 74.0], [30.3, 74.0], [30.4, 74.0], [30.5, 74.0], [30.6, 74.0], [30.7, 74.0], [30.8, 74.0], [30.9, 74.0], [31.0, 74.0], [31.1, 74.0], [31.2, 74.0], [31.3, 74.0], [31.4, 74.0], [31.5, 74.0], [31.6, 74.0], [31.7, 74.0], [31.8, 74.0], [31.9, 74.0], [32.0, 74.0], [32.1, 74.0], [32.2, 74.0], [32.3, 74.0], [32.4, 75.0], [32.5, 75.0], [32.6, 75.0], [32.7, 75.0], [32.8, 75.0], [32.9, 75.0], [33.0, 75.0], [33.1, 75.0], [33.2, 75.0], [33.3, 75.0], [33.4, 76.0], [33.5, 76.0], [33.6, 76.0], [33.7, 76.0], [33.8, 76.0], [33.9, 77.0], [34.0, 77.0], [34.1, 77.0], [34.2, 77.0], [34.3, 77.0], [34.4, 77.0], [34.5, 77.0], [34.6, 77.0], [34.7, 77.0], [34.8, 77.0], [34.9, 77.0], [35.0, 77.0], [35.1, 77.0], [35.2, 77.0], [35.3, 77.0], [35.4, 77.0], [35.5, 77.0], [35.6, 77.0], [35.7, 77.0], [35.8, 77.0], [35.9, 77.0], [36.0, 77.0], [36.1, 77.0], [36.2, 77.0], [36.3, 77.0], [36.4, 77.0], [36.5, 77.0], [36.6, 77.0], [36.7, 78.0], [36.8, 78.0], [36.9, 78.0], [37.0, 78.0], [37.1, 78.0], [37.2, 78.0], [37.3, 78.0], [37.4, 78.0], [37.5, 78.0], [37.6, 78.0], [37.7, 79.0], [37.8, 79.0], [37.9, 79.0], [38.0, 79.0], [38.1, 79.0], [38.2, 79.0], [38.3, 79.0], [38.4, 79.0], [38.5, 79.0], [38.6, 79.0], [38.7, 79.0], [38.8, 79.0], [38.9, 79.0], [39.0, 79.0], [39.1, 80.0], [39.2, 80.0], [39.3, 80.0], [39.4, 80.0], [39.5, 80.0], [39.6, 80.0], [39.7, 80.0], [39.8, 80.0], [39.9, 80.0], [40.0, 81.0], [40.1, 81.0], [40.2, 81.0], [40.3, 81.0], [40.4, 81.0], [40.5, 81.0], [40.6, 81.0], [40.7, 81.0], [40.8, 81.0], [40.9, 81.0], [41.0, 82.0], [41.1, 82.0], [41.2, 82.0], [41.3, 82.0], [41.4, 82.0], [41.5, 83.0], [41.6, 83.0], [41.7, 83.0], [41.8, 83.0], [41.9, 83.0], [42.0, 84.0], [42.1, 84.0], [42.2, 84.0], [42.3, 84.0], [42.4, 84.0], [42.5, 84.0], [42.6, 84.0], [42.7, 84.0], [42.8, 84.0], [42.9, 85.0], [43.0, 85.0], [43.1, 85.0], [43.2, 85.0], [43.3, 85.0], [43.4, 86.0], [43.5, 86.0], [43.6, 86.0], [43.7, 86.0], [43.8, 86.0], [43.9, 87.0], [44.0, 87.0], [44.1, 87.0], [44.2, 87.0], [44.3, 89.0], [44.4, 89.0], [44.5, 89.0], [44.6, 89.0], [44.7, 89.0], [44.8, 90.0], [44.9, 90.0], [45.0, 90.0], [45.1, 90.0], [45.2, 90.0], [45.3, 92.0], [45.4, 92.0], [45.5, 92.0], [45.6, 92.0], [45.7, 92.0], [45.8, 93.0], [45.9, 93.0], [46.0, 93.0], [46.1, 93.0], [46.2, 107.0], [46.3, 107.0], [46.4, 107.0], [46.5, 107.0], [46.6, 107.0], [46.7, 108.0], [46.8, 108.0], [46.9, 108.0], [47.0, 108.0], [47.1, 108.0], [47.2, 108.0], [47.3, 108.0], [47.4, 108.0], [47.5, 108.0], [47.6, 108.0], [47.7, 109.0], [47.8, 109.0], [47.9, 109.0], [48.0, 109.0], [48.1, 109.0], [48.2, 109.0], [48.3, 109.0], [48.4, 109.0], [48.5, 109.0], [48.6, 109.0], [48.7, 109.0], [48.8, 109.0], [48.9, 109.0], [49.0, 109.0], [49.1, 110.0], [49.2, 110.0], [49.3, 110.0], [49.4, 110.0], [49.5, 110.0], [49.6, 110.0], [49.7, 110.0], [49.8, 110.0], [49.9, 110.0], [50.0, 111.0], [50.1, 111.0], [50.2, 111.0], [50.3, 111.0], [50.4, 111.0], [50.5, 111.0], [50.6, 111.0], [50.7, 111.0], [50.8, 111.0], [50.9, 111.0], [51.0, 111.0], [51.1, 111.0], [51.2, 111.0], [51.3, 111.0], [51.4, 111.0], [51.5, 114.0], [51.6, 114.0], [51.7, 114.0], [51.8, 114.0], [51.9, 114.0], [52.0, 115.0], [52.1, 115.0], [52.2, 115.0], [52.3, 115.0], [52.4, 122.0], [52.5, 122.0], [52.6, 122.0], [52.7, 122.0], [52.8, 122.0], [52.9, 124.0], [53.0, 124.0], [53.1, 124.0], [53.2, 124.0], [53.3, 124.0], [53.4, 130.0], [53.5, 130.0], [53.6, 130.0], [53.7, 130.0], [53.8, 130.0], [53.9, 135.0], [54.0, 135.0], [54.1, 135.0], [54.2, 135.0], [54.3, 141.0], [54.4, 141.0], [54.5, 141.0], [54.6, 141.0], [54.7, 141.0], [54.8, 141.0], [54.9, 141.0], [55.0, 141.0], [55.1, 141.0], [55.2, 141.0], [55.3, 169.0], [55.4, 169.0], [55.5, 169.0], [55.6, 169.0], [55.7, 169.0], [55.8, 181.0], [55.9, 181.0], [56.0, 181.0], [56.1, 181.0], [56.2, 188.0], [56.3, 188.0], [56.4, 188.0], [56.5, 188.0], [56.6, 188.0], [56.7, 227.0], [56.8, 227.0], [56.9, 227.0], [57.0, 227.0], [57.1, 227.0], [57.2, 279.0], [57.3, 279.0], [57.4, 279.0], [57.5, 279.0], [57.6, 279.0], [57.7, 282.0], [57.8, 282.0], [57.9, 282.0], [58.0, 282.0], [58.1, 287.0], [58.2, 287.0], [58.3, 287.0], [58.4, 287.0], [58.5, 287.0], [58.6, 290.0], [58.7, 290.0], [58.8, 290.0], [58.9, 290.0], [59.0, 290.0], [59.1, 292.0], [59.2, 292.0], [59.3, 292.0], [59.4, 292.0], [59.5, 292.0], [59.6, 293.0], [59.7, 293.0], [59.8, 293.0], [59.9, 293.0], [60.0, 294.0], [60.1, 294.0], [60.2, 294.0], [60.3, 294.0], [60.4, 294.0], [60.5, 294.0], [60.6, 294.0], [60.7, 294.0], [60.8, 294.0], [60.9, 294.0], [61.0, 294.0], [61.1, 294.0], [61.2, 294.0], [61.3, 294.0], [61.4, 294.0], [61.5, 295.0], [61.6, 295.0], [61.7, 295.0], [61.8, 295.0], [61.9, 295.0], [62.0, 295.0], [62.1, 295.0], [62.2, 295.0], [62.3, 295.0], [62.4, 298.0], [62.5, 298.0], [62.6, 298.0], [62.7, 298.0], [62.8, 298.0], [62.9, 299.0], [63.0, 299.0], [63.1, 299.0], [63.2, 299.0], [63.3, 299.0], [63.4, 299.0], [63.5, 299.0], [63.6, 299.0], [63.7, 299.0], [63.8, 299.0], [63.9, 304.0], [64.0, 304.0], [64.1, 304.0], [64.2, 304.0], [64.3, 305.0], [64.4, 305.0], [64.5, 305.0], [64.6, 305.0], [64.7, 305.0], [64.8, 306.0], [64.9, 306.0], [65.0, 306.0], [65.1, 306.0], [65.2, 306.0], [65.3, 310.0], [65.4, 310.0], [65.5, 310.0], [65.6, 310.0], [65.7, 310.0], [65.8, 310.0], [65.9, 310.0], [66.0, 310.0], [66.1, 310.0], [66.2, 311.0], [66.3, 311.0], [66.4, 311.0], [66.5, 311.0], [66.6, 311.0], [66.7, 311.0], [66.8, 311.0], [66.9, 311.0], [67.0, 311.0], [67.1, 311.0], [67.2, 311.0], [67.3, 311.0], [67.4, 311.0], [67.5, 311.0], [67.6, 311.0], [67.7, 314.0], [67.8, 314.0], [67.9, 314.0], [68.0, 314.0], [68.1, 318.0], [68.2, 318.0], [68.3, 318.0], [68.4, 318.0], [68.5, 318.0], [68.6, 320.0], [68.7, 320.0], [68.8, 320.0], [68.9, 320.0], [69.0, 320.0], [69.1, 324.0], [69.2, 324.0], [69.3, 324.0], [69.4, 324.0], [69.5, 324.0], [69.6, 326.0], [69.7, 326.0], [69.8, 326.0], [69.9, 326.0], [70.0, 327.0], [70.1, 327.0], [70.2, 327.0], [70.3, 327.0], [70.4, 327.0], [70.5, 327.0], [70.6, 327.0], [70.7, 327.0], [70.8, 327.0], [70.9, 327.0], [71.0, 328.0], [71.1, 328.0], [71.2, 328.0], [71.3, 328.0], [71.4, 328.0], [71.5, 330.0], [71.6, 330.0], [71.7, 330.0], [71.8, 330.0], [71.9, 330.0], [72.0, 334.0], [72.1, 334.0], [72.2, 334.0], [72.3, 334.0], [72.4, 334.0], [72.5, 334.0], [72.6, 334.0], [72.7, 334.0], [72.8, 334.0], [72.9, 335.0], [73.0, 335.0], [73.1, 335.0], [73.2, 335.0], [73.3, 335.0], [73.4, 341.0], [73.5, 341.0], [73.6, 341.0], [73.7, 341.0], [73.8, 341.0], [73.9, 353.0], [74.0, 353.0], [74.1, 353.0], [74.2, 353.0], [74.3, 374.0], [74.4, 374.0], [74.5, 374.0], [74.6, 374.0], [74.7, 374.0], [74.8, 374.0], [74.9, 374.0], [75.0, 374.0], [75.1, 374.0], [75.2, 374.0], [75.3, 424.0], [75.4, 424.0], [75.5, 424.0], [75.6, 424.0], [75.7, 424.0], [75.8, 440.0], [75.9, 440.0], [76.0, 440.0], [76.1, 440.0], [76.2, 516.0], [76.3, 516.0], [76.4, 516.0], [76.5, 516.0], [76.6, 516.0], [76.7, 523.0], [76.8, 523.0], [76.9, 523.0], [77.0, 523.0], [77.1, 523.0], [77.2, 530.0], [77.3, 530.0], [77.4, 530.0], [77.5, 530.0], [77.6, 530.0], [77.7, 578.0], [77.8, 578.0], [77.9, 578.0], [78.0, 578.0], [78.1, 632.0], [78.2, 632.0], [78.3, 632.0], [78.4, 632.0], [78.5, 632.0], [78.6, 742.0], [78.7, 742.0], [78.8, 742.0], [78.9, 742.0], [79.0, 742.0], [79.1, 775.0], [79.2, 775.0], [79.3, 775.0], [79.4, 775.0], [79.5, 775.0], [79.6, 813.0], [79.7, 813.0], [79.8, 813.0], [79.9, 813.0], [80.0, 813.0], [80.1, 863.0], [80.2, 863.0], [80.3, 863.0], [80.4, 863.0], [80.5, 871.0], [80.6, 871.0], [80.7, 871.0], [80.8, 871.0], [80.9, 871.0], [81.0, 980.0], [81.1, 980.0], [81.2, 980.0], [81.3, 980.0], [81.4, 980.0], [81.5, 985.0], [81.6, 985.0], [81.7, 985.0], [81.8, 985.0], [81.9, 985.0], [82.0, 1048.0], [82.1, 1048.0], [82.2, 1048.0], [82.3, 1048.0], [82.4, 1053.0], [82.5, 1053.0], [82.6, 1053.0], [82.7, 1053.0], [82.8, 1053.0], [82.9, 1147.0], [83.0, 1147.0], [83.1, 1147.0], [83.2, 1147.0], [83.3, 1147.0], [83.4, 1175.0], [83.5, 1175.0], [83.6, 1175.0], [83.7, 1175.0], [83.8, 1175.0], [83.9, 1185.0], [84.0, 1185.0], [84.1, 1185.0], [84.2, 1185.0], [84.3, 1191.0], [84.4, 1191.0], [84.5, 1191.0], [84.6, 1191.0], [84.7, 1191.0], [84.8, 1194.0], [84.9, 1194.0], [85.0, 1194.0], [85.1, 1194.0], [85.2, 1194.0], [85.3, 1195.0], [85.4, 1195.0], [85.5, 1195.0], [85.6, 1195.0], [85.7, 1195.0], [85.8, 1214.0], [85.9, 1214.0], [86.0, 1214.0], [86.1, 1214.0], [86.2, 1235.0], [86.3, 1235.0], [86.4, 1235.0], [86.5, 1235.0], [86.6, 1235.0], [86.7, 1355.0], [86.8, 1355.0], [86.9, 1355.0], [87.0, 1355.0], [87.1, 1355.0], [87.2, 1356.0], [87.3, 1356.0], [87.4, 1356.0], [87.5, 1356.0], [87.6, 1356.0], [87.7, 1381.0], [87.8, 1381.0], [87.9, 1381.0], [88.0, 1381.0], [88.1, 1396.0], [88.2, 1396.0], [88.3, 1396.0], [88.4, 1396.0], [88.5, 1396.0], [88.6, 1399.0], [88.7, 1399.0], [88.8, 1399.0], [88.9, 1399.0], [89.0, 1399.0], [89.1, 1755.0], [89.2, 1755.0], [89.3, 1755.0], [89.4, 1755.0], [89.5, 1755.0], [89.6, 1828.0], [89.7, 1828.0], [89.8, 1828.0], [89.9, 1828.0], [90.0, 1828.0], [90.1, 1876.0], [90.2, 1876.0], [90.3, 1876.0], [90.4, 1876.0], [90.5, 1934.0], [90.6, 1934.0], [90.7, 1934.0], [90.8, 1934.0], [90.9, 1934.0], [91.0, 1984.0], [91.1, 1984.0], [91.2, 1984.0], [91.3, 1984.0], [91.4, 1984.0], [91.5, 2111.0], [91.6, 2111.0], [91.7, 2111.0], [91.8, 2111.0], [91.9, 2111.0], [92.0, 2754.0], [92.1, 2754.0], [92.2, 2754.0], [92.3, 2754.0], [92.4, 3120.0], [92.5, 3120.0], [92.6, 3120.0], [92.7, 3120.0], [92.8, 3120.0], [92.9, 3135.0], [93.0, 3135.0], [93.1, 3135.0], [93.2, 3135.0], [93.3, 3135.0], [93.4, 3356.0], [93.5, 3356.0], [93.6, 3356.0], [93.7, 3356.0], [93.8, 3356.0], [93.9, 3480.0], [94.0, 3480.0], [94.1, 3480.0], [94.2, 3480.0], [94.3, 4044.0], [94.4, 4044.0], [94.5, 4044.0], [94.6, 4044.0], [94.7, 4044.0], [94.8, 6278.0], [94.9, 6278.0], [95.0, 6278.0], [95.1, 6278.0], [95.2, 6278.0], [95.3, 8424.0], [95.4, 8424.0], [95.5, 8424.0], [95.6, 8424.0], [95.7, 8424.0], [95.8, 9123.0], [95.9, 9123.0], [96.0, 9123.0], [96.1, 9123.0], [96.2, 9362.0], [96.3, 9362.0], [96.4, 9362.0], [96.5, 9362.0], [96.6, 9362.0], [96.7, 9365.0], [96.8, 9365.0], [96.9, 9365.0], [97.0, 9365.0], [97.1, 9365.0], [97.2, 9397.0], [97.3, 9397.0], [97.4, 9397.0], [97.5, 9397.0], [97.6, 9397.0], [97.7, 9446.0], [97.8, 9446.0], [97.9, 9446.0], [98.0, 9446.0], [98.1, 9573.0], [98.2, 9573.0], [98.3, 9573.0], [98.4, 9573.0], [98.5, 9573.0], [98.6, 14092.0], [98.7, 14092.0], [98.8, 14092.0], [98.9, 14092.0], [99.0, 14092.0], [99.1, 14233.0], [99.2, 14233.0], [99.3, 14233.0], [99.4, 14233.0], [99.5, 14233.0], [99.6, 15915.0], [99.7, 15915.0], [99.8, 15915.0], [99.9, 15915.0], [100.0, 15915.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[0.0, 258.0], [0.1, 258.0], [0.2, 258.0], [0.3, 258.0], [0.4, 258.0], [0.5, 260.0], [0.6, 260.0], [0.7, 260.0], [0.8, 260.0], [0.9, 260.0], [1.0, 260.0], [1.1, 260.0], [1.2, 260.0], [1.3, 260.0], [1.4, 260.0], [1.5, 260.0], [1.6, 260.0], [1.7, 260.0], [1.8, 260.0], [1.9, 260.0], [2.0, 260.0], [2.1, 260.0], [2.2, 260.0], [2.3, 260.0], [2.4, 261.0], [2.5, 261.0], [2.6, 261.0], [2.7, 261.0], [2.8, 261.0], [2.9, 261.0], [3.0, 261.0], [3.1, 261.0], [3.2, 261.0], [3.3, 261.0], [3.4, 262.0], [3.5, 262.0], [3.6, 262.0], [3.7, 262.0], [3.8, 262.0], [3.9, 264.0], [4.0, 264.0], [4.1, 264.0], [4.2, 264.0], [4.3, 268.0], [4.4, 268.0], [4.5, 268.0], [4.6, 268.0], [4.7, 268.0], [4.8, 269.0], [4.9, 269.0], [5.0, 269.0], [5.1, 269.0], [5.2, 269.0], [5.3, 273.0], [5.4, 273.0], [5.5, 273.0], [5.6, 273.0], [5.7, 273.0], [5.8, 274.0], [5.9, 274.0], [6.0, 274.0], [6.1, 274.0], [6.2, 283.0], [6.3, 283.0], [6.4, 283.0], [6.5, 283.0], [6.6, 283.0], [6.7, 302.0], [6.8, 302.0], [6.9, 302.0], [7.0, 302.0], [7.1, 302.0], [7.2, 320.0], [7.3, 320.0], [7.4, 320.0], [7.5, 320.0], [7.6, 320.0], [7.7, 348.0], [7.8, 348.0], [7.9, 348.0], [8.0, 348.0], [8.1, 365.0], [8.2, 365.0], [8.3, 365.0], [8.4, 365.0], [8.5, 365.0], [8.6, 370.0], [8.7, 370.0], [8.8, 370.0], [8.9, 370.0], [9.0, 370.0], [9.1, 431.0], [9.2, 431.0], [9.3, 431.0], [9.4, 431.0], [9.5, 431.0], [9.6, 487.0], [9.7, 487.0], [9.8, 487.0], [9.9, 487.0], [10.0, 534.0], [10.1, 534.0], [10.2, 534.0], [10.3, 534.0], [10.4, 534.0], [10.5, 537.0], [10.6, 537.0], [10.7, 537.0], [10.8, 537.0], [10.9, 537.0], [11.0, 577.0], [11.1, 577.0], [11.2, 577.0], [11.3, 577.0], [11.4, 577.0], [11.5, 600.0], [11.6, 600.0], [11.7, 600.0], [11.8, 600.0], [11.9, 600.0], [12.0, 613.0], [12.1, 613.0], [12.2, 613.0], [12.3, 613.0], [12.4, 629.0], [12.5, 629.0], [12.6, 629.0], [12.7, 629.0], [12.8, 629.0], [12.9, 659.0], [13.0, 659.0], [13.1, 659.0], [13.2, 659.0], [13.3, 659.0], [13.4, 805.0], [13.5, 805.0], [13.6, 805.0], [13.7, 805.0], [13.8, 805.0], [13.9, 840.0], [14.0, 840.0], [14.1, 840.0], [14.2, 840.0], [14.3, 892.0], [14.4, 892.0], [14.5, 892.0], [14.6, 892.0], [14.7, 892.0], [14.8, 899.0], [14.9, 899.0], [15.0, 899.0], [15.1, 899.0], [15.2, 899.0], [15.3, 949.0], [15.4, 949.0], [15.5, 949.0], [15.6, 949.0], [15.7, 949.0], [15.8, 996.0], [15.9, 996.0], [16.0, 996.0], [16.1, 996.0], [16.2, 1010.0], [16.3, 1010.0], [16.4, 1010.0], [16.5, 1010.0], [16.6, 1010.0], [16.7, 1035.0], [16.8, 1035.0], [16.9, 1035.0], [17.0, 1035.0], [17.1, 1035.0], [17.2, 1045.0], [17.3, 1045.0], [17.4, 1045.0], [17.5, 1045.0], [17.6, 1045.0], [17.7, 1121.0], [17.8, 1121.0], [17.9, 1121.0], [18.0, 1121.0], [18.1, 1134.0], [18.2, 1134.0], [18.3, 1134.0], [18.4, 1134.0], [18.5, 1134.0], [18.6, 1182.0], [18.7, 1182.0], [18.8, 1182.0], [18.9, 1182.0], [19.0, 1182.0], [19.1, 1199.0], [19.2, 1199.0], [19.3, 1199.0], [19.4, 1199.0], [19.5, 1199.0], [19.6, 1260.0], [19.7, 1260.0], [19.8, 1260.0], [19.9, 1260.0], [20.0, 1314.0], [20.1, 1314.0], [20.2, 1314.0], [20.3, 1314.0], [20.4, 1314.0], [20.5, 1342.0], [20.6, 1342.0], [20.7, 1342.0], [20.8, 1342.0], [20.9, 1342.0], [21.0, 1466.0], [21.1, 1466.0], [21.2, 1466.0], [21.3, 1466.0], [21.4, 1466.0], [21.5, 1519.0], [21.6, 1519.0], [21.7, 1519.0], [21.8, 1519.0], [21.9, 1519.0], [22.0, 1592.0], [22.1, 1592.0], [22.2, 1592.0], [22.3, 1592.0], [22.4, 1597.0], [22.5, 1597.0], [22.6, 1597.0], [22.7, 1597.0], [22.8, 1597.0], [22.9, 1617.0], [23.0, 1617.0], [23.1, 1617.0], [23.2, 1617.0], [23.3, 1617.0], [23.4, 1685.0], [23.5, 1685.0], [23.6, 1685.0], [23.7, 1685.0], [23.8, 1685.0], [23.9, 1685.0], [24.0, 1685.0], [24.1, 1685.0], [24.2, 1685.0], [24.3, 1688.0], [24.4, 1688.0], [24.5, 1688.0], [24.6, 1688.0], [24.7, 1688.0], [24.8, 1756.0], [24.9, 1756.0], [25.0, 1756.0], [25.1, 1756.0], [25.2, 1756.0], [25.3, 1838.0], [25.4, 1838.0], [25.5, 1838.0], [25.6, 1838.0], [25.7, 1838.0], [25.8, 1858.0], [25.9, 1858.0], [26.0, 1858.0], [26.1, 1858.0], [26.2, 1890.0], [26.3, 1890.0], [26.4, 1890.0], [26.5, 1890.0], [26.6, 1890.0], [26.7, 1902.0], [26.8, 1902.0], [26.9, 1902.0], [27.0, 1902.0], [27.1, 1902.0], [27.2, 1910.0], [27.3, 1910.0], [27.4, 1910.0], [27.5, 1910.0], [27.6, 1910.0], [27.7, 1916.0], [27.8, 1916.0], [27.9, 1916.0], [28.0, 1916.0], [28.1, 1970.0], [28.2, 1970.0], [28.3, 1970.0], [28.4, 1970.0], [28.5, 1970.0], [28.6, 1991.0], [28.7, 1991.0], [28.8, 1991.0], [28.9, 1991.0], [29.0, 1991.0], [29.1, 2104.0], [29.2, 2104.0], [29.3, 2104.0], [29.4, 2104.0], [29.5, 2104.0], [29.6, 2218.0], [29.7, 2218.0], [29.8, 2218.0], [29.9, 2218.0], [30.0, 2219.0], [30.1, 2219.0], [30.2, 2219.0], [30.3, 2219.0], [30.4, 2219.0], [30.5, 2274.0], [30.6, 2274.0], [30.7, 2274.0], [30.8, 2274.0], [30.9, 2274.0], [31.0, 2334.0], [31.1, 2334.0], [31.2, 2334.0], [31.3, 2334.0], [31.4, 2334.0], [31.5, 2349.0], [31.6, 2349.0], [31.7, 2349.0], [31.8, 2349.0], [31.9, 2349.0], [32.0, 2376.0], [32.1, 2376.0], [32.2, 2376.0], [32.3, 2376.0], [32.4, 2452.0], [32.5, 2452.0], [32.6, 2452.0], [32.7, 2452.0], [32.8, 2452.0], [32.9, 2453.0], [33.0, 2453.0], [33.1, 2453.0], [33.2, 2453.0], [33.3, 2453.0], [33.4, 2465.0], [33.5, 2465.0], [33.6, 2465.0], [33.7, 2465.0], [33.8, 2465.0], [33.9, 2465.0], [34.0, 2465.0], [34.1, 2465.0], [34.2, 2465.0], [34.3, 2481.0], [34.4, 2481.0], [34.5, 2481.0], [34.6, 2481.0], [34.7, 2481.0], [34.8, 2534.0], [34.9, 2534.0], [35.0, 2534.0], [35.1, 2534.0], [35.2, 2534.0], [35.3, 2573.0], [35.4, 2573.0], [35.5, 2573.0], [35.6, 2573.0], [35.7, 2573.0], [35.8, 2588.0], [35.9, 2588.0], [36.0, 2588.0], [36.1, 2588.0], [36.2, 2632.0], [36.3, 2632.0], [36.4, 2632.0], [36.5, 2632.0], [36.6, 2632.0], [36.7, 2642.0], [36.8, 2642.0], [36.9, 2642.0], [37.0, 2642.0], [37.1, 2642.0], [37.2, 2664.0], [37.3, 2664.0], [37.4, 2664.0], [37.5, 2664.0], [37.6, 2664.0], [37.7, 2690.0], [37.8, 2690.0], [37.9, 2690.0], [38.0, 2690.0], [38.1, 2709.0], [38.2, 2709.0], [38.3, 2709.0], [38.4, 2709.0], [38.5, 2709.0], [38.6, 2729.0], [38.7, 2729.0], [38.8, 2729.0], [38.9, 2729.0], [39.0, 2729.0], [39.1, 2852.0], [39.2, 2852.0], [39.3, 2852.0], [39.4, 2852.0], [39.5, 2852.0], [39.6, 2882.0], [39.7, 2882.0], [39.8, 2882.0], [39.9, 2882.0], [40.0, 2891.0], [40.1, 2891.0], [40.2, 2891.0], [40.3, 2891.0], [40.4, 2891.0], [40.5, 3028.0], [40.6, 3028.0], [40.7, 3028.0], [40.8, 3028.0], [40.9, 3028.0], [41.0, 3036.0], [41.1, 3036.0], [41.2, 3036.0], [41.3, 3036.0], [41.4, 3036.0], [41.5, 3089.0], [41.6, 3089.0], [41.7, 3089.0], [41.8, 3089.0], [41.9, 3089.0], [42.0, 3179.0], [42.1, 3179.0], [42.2, 3179.0], [42.3, 3179.0], [42.4, 3195.0], [42.5, 3195.0], [42.6, 3195.0], [42.7, 3195.0], [42.8, 3195.0], [42.9, 3228.0], [43.0, 3228.0], [43.1, 3228.0], [43.2, 3228.0], [43.3, 3228.0], [43.4, 3322.0], [43.5, 3322.0], [43.6, 3322.0], [43.7, 3322.0], [43.8, 3322.0], [43.9, 3367.0], [44.0, 3367.0], [44.1, 3367.0], [44.2, 3367.0], [44.3, 3378.0], [44.4, 3378.0], [44.5, 3378.0], [44.6, 3378.0], [44.7, 3378.0], [44.8, 3459.0], [44.9, 3459.0], [45.0, 3459.0], [45.1, 3459.0], [45.2, 3459.0], [45.3, 3483.0], [45.4, 3483.0], [45.5, 3483.0], [45.6, 3483.0], [45.7, 3483.0], [45.8, 3491.0], [45.9, 3491.0], [46.0, 3491.0], [46.1, 3491.0], [46.2, 3580.0], [46.3, 3580.0], [46.4, 3580.0], [46.5, 3580.0], [46.6, 3580.0], [46.7, 3604.0], [46.8, 3604.0], [46.9, 3604.0], [47.0, 3604.0], [47.1, 3604.0], [47.2, 3614.0], [47.3, 3614.0], [47.4, 3614.0], [47.5, 3614.0], [47.6, 3614.0], [47.7, 3622.0], [47.8, 3622.0], [47.9, 3622.0], [48.0, 3622.0], [48.1, 3653.0], [48.2, 3653.0], [48.3, 3653.0], [48.4, 3653.0], [48.5, 3653.0], [48.6, 3657.0], [48.7, 3657.0], [48.8, 3657.0], [48.9, 3657.0], [49.0, 3657.0], [49.1, 3689.0], [49.2, 3689.0], [49.3, 3689.0], [49.4, 3689.0], [49.5, 3689.0], [49.6, 3772.0], [49.7, 3772.0], [49.8, 3772.0], [49.9, 3772.0], [50.0, 3781.0], [50.1, 3781.0], [50.2, 3781.0], [50.3, 3781.0], [50.4, 3781.0], [50.5, 3787.0], [50.6, 3787.0], [50.7, 3787.0], [50.8, 3787.0], [50.9, 3787.0], [51.0, 3838.0], [51.1, 3838.0], [51.2, 3838.0], [51.3, 3838.0], [51.4, 3838.0], [51.5, 3839.0], [51.6, 3839.0], [51.7, 3839.0], [51.8, 3839.0], [51.9, 3839.0], [52.0, 3874.0], [52.1, 3874.0], [52.2, 3874.0], [52.3, 3874.0], [52.4, 3978.0], [52.5, 3978.0], [52.6, 3978.0], [52.7, 3978.0], [52.8, 3978.0], [52.9, 4006.0], [53.0, 4006.0], [53.1, 4006.0], [53.2, 4006.0], [53.3, 4006.0], [53.4, 4022.0], [53.5, 4022.0], [53.6, 4022.0], [53.7, 4022.0], [53.8, 4022.0], [53.9, 4041.0], [54.0, 4041.0], [54.1, 4041.0], [54.2, 4041.0], [54.3, 4085.0], [54.4, 4085.0], [54.5, 4085.0], [54.6, 4085.0], [54.7, 4085.0], [54.8, 4098.0], [54.9, 4098.0], [55.0, 4098.0], [55.1, 4098.0], [55.2, 4098.0], [55.3, 4144.0], [55.4, 4144.0], [55.5, 4144.0], [55.6, 4144.0], [55.7, 4144.0], [55.8, 4157.0], [55.9, 4157.0], [56.0, 4157.0], [56.1, 4157.0], [56.2, 4162.0], [56.3, 4162.0], [56.4, 4162.0], [56.5, 4162.0], [56.6, 4162.0], [56.7, 4285.0], [56.8, 4285.0], [56.9, 4285.0], [57.0, 4285.0], [57.1, 4285.0], [57.2, 4442.0], [57.3, 4442.0], [57.4, 4442.0], [57.5, 4442.0], [57.6, 4442.0], [57.7, 4544.0], [57.8, 4544.0], [57.9, 4544.0], [58.0, 4544.0], [58.1, 4663.0], [58.2, 4663.0], [58.3, 4663.0], [58.4, 4663.0], [58.5, 4663.0], [58.6, 4694.0], [58.7, 4694.0], [58.8, 4694.0], [58.9, 4694.0], [59.0, 4694.0], [59.1, 4705.0], [59.2, 4705.0], [59.3, 4705.0], [59.4, 4705.0], [59.5, 4705.0], [59.6, 4709.0], [59.7, 4709.0], [59.8, 4709.0], [59.9, 4709.0], [60.0, 4805.0], [60.1, 4805.0], [60.2, 4805.0], [60.3, 4805.0], [60.4, 4805.0], [60.5, 4857.0], [60.6, 4857.0], [60.7, 4857.0], [60.8, 4857.0], [60.9, 4857.0], [61.0, 4858.0], [61.1, 4858.0], [61.2, 4858.0], [61.3, 4858.0], [61.4, 4858.0], [61.5, 4911.0], [61.6, 4911.0], [61.7, 4911.0], [61.8, 4911.0], [61.9, 4911.0], [62.0, 5002.0], [62.1, 5002.0], [62.2, 5002.0], [62.3, 5002.0], [62.4, 5106.0], [62.5, 5106.0], [62.6, 5106.0], [62.7, 5106.0], [62.8, 5106.0], [62.9, 5111.0], [63.0, 5111.0], [63.1, 5111.0], [63.2, 5111.0], [63.3, 5111.0], [63.4, 5125.0], [63.5, 5125.0], [63.6, 5125.0], [63.7, 5125.0], [63.8, 5125.0], [63.9, 5250.0], [64.0, 5250.0], [64.1, 5250.0], [64.2, 5250.0], [64.3, 5281.0], [64.4, 5281.0], [64.5, 5281.0], [64.6, 5281.0], [64.7, 5281.0], [64.8, 5306.0], [64.9, 5306.0], [65.0, 5306.0], [65.1, 5306.0], [65.2, 5306.0], [65.3, 5328.0], [65.4, 5328.0], [65.5, 5328.0], [65.6, 5328.0], [65.7, 5328.0], [65.8, 5386.0], [65.9, 5386.0], [66.0, 5386.0], [66.1, 5386.0], [66.2, 5447.0], [66.3, 5447.0], [66.4, 5447.0], [66.5, 5447.0], [66.6, 5447.0], [66.7, 5463.0], [66.8, 5463.0], [66.9, 5463.0], [67.0, 5463.0], [67.1, 5463.0], [67.2, 5598.0], [67.3, 5598.0], [67.4, 5598.0], [67.5, 5598.0], [67.6, 5598.0], [67.7, 5639.0], [67.8, 5639.0], [67.9, 5639.0], [68.0, 5639.0], [68.1, 5670.0], [68.2, 5670.0], [68.3, 5670.0], [68.4, 5670.0], [68.5, 5670.0], [68.6, 5722.0], [68.7, 5722.0], [68.8, 5722.0], [68.9, 5722.0], [69.0, 5722.0], [69.1, 5748.0], [69.2, 5748.0], [69.3, 5748.0], [69.4, 5748.0], [69.5, 5748.0], [69.6, 5760.0], [69.7, 5760.0], [69.8, 5760.0], [69.9, 5760.0], [70.0, 5780.0], [70.1, 5780.0], [70.2, 5780.0], [70.3, 5780.0], [70.4, 5780.0], [70.5, 5797.0], [70.6, 5797.0], [70.7, 5797.0], [70.8, 5797.0], [70.9, 5797.0], [71.0, 5865.0], [71.1, 5865.0], [71.2, 5865.0], [71.3, 5865.0], [71.4, 5865.0], [71.5, 6058.0], [71.6, 6058.0], [71.7, 6058.0], [71.8, 6058.0], [71.9, 6058.0], [72.0, 6199.0], [72.1, 6199.0], [72.2, 6199.0], [72.3, 6199.0], [72.4, 6230.0], [72.5, 6230.0], [72.6, 6230.0], [72.7, 6230.0], [72.8, 6230.0], [72.9, 6262.0], [73.0, 6262.0], [73.1, 6262.0], [73.2, 6262.0], [73.3, 6262.0], [73.4, 6345.0], [73.5, 6345.0], [73.6, 6345.0], [73.7, 6345.0], [73.8, 6345.0], [73.9, 6369.0], [74.0, 6369.0], [74.1, 6369.0], [74.2, 6369.0], [74.3, 6402.0], [74.4, 6402.0], [74.5, 6402.0], [74.6, 6402.0], [74.7, 6402.0], [74.8, 6467.0], [74.9, 6467.0], [75.0, 6467.0], [75.1, 6467.0], [75.2, 6467.0], [75.3, 6540.0], [75.4, 6540.0], [75.5, 6540.0], [75.6, 6540.0], [75.7, 6540.0], [75.8, 6636.0], [75.9, 6636.0], [76.0, 6636.0], [76.1, 6636.0], [76.2, 6728.0], [76.3, 6728.0], [76.4, 6728.0], [76.5, 6728.0], [76.6, 6728.0], [76.7, 6832.0], [76.8, 6832.0], [76.9, 6832.0], [77.0, 6832.0], [77.1, 6832.0], [77.2, 6856.0], [77.3, 6856.0], [77.4, 6856.0], [77.5, 6856.0], [77.6, 6856.0], [77.7, 6859.0], [77.8, 6859.0], [77.9, 6859.0], [78.0, 6859.0], [78.1, 7040.0], [78.2, 7040.0], [78.3, 7040.0], [78.4, 7040.0], [78.5, 7040.0], [78.6, 7080.0], [78.7, 7080.0], [78.8, 7080.0], [78.9, 7080.0], [79.0, 7080.0], [79.1, 7098.0], [79.2, 7098.0], [79.3, 7098.0], [79.4, 7098.0], [79.5, 7098.0], [79.6, 7155.0], [79.7, 7155.0], [79.8, 7155.0], [79.9, 7155.0], [80.0, 7155.0], [80.1, 7352.0], [80.2, 7352.0], [80.3, 7352.0], [80.4, 7352.0], [80.5, 7520.0], [80.6, 7520.0], [80.7, 7520.0], [80.8, 7520.0], [80.9, 7520.0], [81.0, 7625.0], [81.1, 7625.0], [81.2, 7625.0], [81.3, 7625.0], [81.4, 7625.0], [81.5, 7680.0], [81.6, 7680.0], [81.7, 7680.0], [81.8, 7680.0], [81.9, 7680.0], [82.0, 8087.0], [82.1, 8087.0], [82.2, 8087.0], [82.3, 8087.0], [82.4, 8161.0], [82.5, 8161.0], [82.6, 8161.0], [82.7, 8161.0], [82.8, 8161.0], [82.9, 8173.0], [83.0, 8173.0], [83.1, 8173.0], [83.2, 8173.0], [83.3, 8173.0], [83.4, 8289.0], [83.5, 8289.0], [83.6, 8289.0], [83.7, 8289.0], [83.8, 8289.0], [83.9, 8668.0], [84.0, 8668.0], [84.1, 8668.0], [84.2, 8668.0], [84.3, 8670.0], [84.4, 8670.0], [84.5, 8670.0], [84.6, 8670.0], [84.7, 8670.0], [84.8, 8680.0], [84.9, 8680.0], [85.0, 8680.0], [85.1, 8680.0], [85.2, 8680.0], [85.3, 9185.0], [85.4, 9185.0], [85.5, 9185.0], [85.6, 9185.0], [85.7, 9185.0], [85.8, 9323.0], [85.9, 9323.0], [86.0, 9323.0], [86.1, 9323.0], [86.2, 9512.0], [86.3, 9512.0], [86.4, 9512.0], [86.5, 9512.0], [86.6, 9512.0], [86.7, 9804.0], [86.8, 9804.0], [86.9, 9804.0], [87.0, 9804.0], [87.1, 9804.0], [87.2, 10537.0], [87.3, 10537.0], [87.4, 10537.0], [87.5, 10537.0], [87.6, 10537.0], [87.7, 10938.0], [87.8, 10938.0], [87.9, 10938.0], [88.0, 10938.0], [88.1, 10996.0], [88.2, 10996.0], [88.3, 10996.0], [88.4, 10996.0], [88.5, 10996.0], [88.6, 11064.0], [88.7, 11064.0], [88.8, 11064.0], [88.9, 11064.0], [89.0, 11064.0], [89.1, 11392.0], [89.2, 11392.0], [89.3, 11392.0], [89.4, 11392.0], [89.5, 11392.0], [89.6, 11698.0], [89.7, 11698.0], [89.8, 11698.0], [89.9, 11698.0], [90.0, 11698.0], [90.1, 11819.0], [90.2, 11819.0], [90.3, 11819.0], [90.4, 11819.0], [90.5, 11936.0], [90.6, 11936.0], [90.7, 11936.0], [90.8, 11936.0], [90.9, 11936.0], [91.0, 12643.0], [91.1, 12643.0], [91.2, 12643.0], [91.3, 12643.0], [91.4, 12643.0], [91.5, 13998.0], [91.6, 13998.0], [91.7, 13998.0], [91.8, 13998.0], [91.9, 13998.0], [92.0, 14531.0], [92.1, 14531.0], [92.2, 14531.0], [92.3, 14531.0], [92.4, 14559.0], [92.5, 14559.0], [92.6, 14559.0], [92.7, 14559.0], [92.8, 14559.0], [92.9, 14560.0], [93.0, 14560.0], [93.1, 14560.0], [93.2, 14560.0], [93.3, 14560.0], [93.4, 14874.0], [93.5, 14874.0], [93.6, 14874.0], [93.7, 14874.0], [93.8, 14874.0], [93.9, 16108.0], [94.0, 16108.0], [94.1, 16108.0], [94.2, 16108.0], [94.3, 17175.0], [94.4, 17175.0], [94.5, 17175.0], [94.6, 17175.0], [94.7, 17175.0], [94.8, 17211.0], [94.9, 17211.0], [95.0, 17211.0], [95.1, 17211.0], [95.2, 17211.0], [95.3, 17448.0], [95.4, 17448.0], [95.5, 17448.0], [95.6, 17448.0], [95.7, 17448.0], [95.8, 19778.0], [95.9, 19778.0], [96.0, 19778.0], [96.1, 19778.0], [96.2, 28536.0], [96.3, 28536.0], [96.4, 28536.0], [96.5, 28536.0], [96.6, 28536.0], [96.7, 28685.0], [96.8, 28685.0], [96.9, 28685.0], [97.0, 28685.0], [97.1, 28685.0], [97.2, 29123.0], [97.3, 29123.0], [97.4, 29123.0], [97.5, 29123.0], [97.6, 29123.0], [97.7, 29384.0], [97.8, 29384.0], [97.9, 29384.0], [98.0, 29384.0], [98.1, 29756.0], [98.2, 29756.0], [98.3, 29756.0], [98.4, 29756.0], [98.5, 29756.0], [98.6, 30020.0], [98.7, 30020.0], [98.8, 30020.0], [98.9, 30020.0], [99.0, 30020.0], [99.1, 31427.0], [99.2, 31427.0], [99.3, 31427.0], [99.4, 31427.0], [99.5, 31427.0], [99.6, 57143.0], [99.7, 57143.0], [99.8, 57143.0], [99.9, 57143.0], [100.0, 57143.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 97.0, "series": [{"data": [[600.0, 1.0], [700.0, 2.0], [800.0, 4.0], [900.0, 5.0], [1000.0, 3.0], [1100.0, 2.0], [1200.0, 2.0], [1300.0, 1.0], [1400.0, 1.0], [1500.0, 4.0], [1600.0, 6.0], [1700.0, 5.0], [1800.0, 4.0], [1900.0, 3.0], [2000.0, 2.0], [2100.0, 4.0], [2300.0, 7.0], [2200.0, 4.0], [2400.0, 3.0], [2500.0, 6.0], [2600.0, 2.0], [2800.0, 2.0], [2700.0, 2.0], [2900.0, 4.0], [3000.0, 2.0], [3100.0, 2.0], [3200.0, 2.0], [3300.0, 2.0], [3400.0, 2.0], [3500.0, 5.0], [3700.0, 4.0], [3600.0, 3.0], [3800.0, 2.0], [3900.0, 3.0], [4000.0, 4.0], [4100.0, 1.0], [4300.0, 1.0], [4200.0, 1.0], [4500.0, 2.0], [4600.0, 2.0], [4700.0, 3.0], [4800.0, 2.0], [4900.0, 1.0], [5100.0, 2.0], [5000.0, 2.0], [5200.0, 1.0], [5300.0, 1.0], [5500.0, 4.0], [5600.0, 3.0], [5800.0, 1.0], [5700.0, 1.0], [6100.0, 2.0], [5900.0, 1.0], [6200.0, 2.0], [6300.0, 1.0], [6400.0, 1.0], [6500.0, 1.0], [6600.0, 1.0], [6700.0, 1.0], [7000.0, 2.0], [7200.0, 2.0], [7300.0, 1.0], [7900.0, 2.0], [7800.0, 1.0], [8000.0, 1.0], [8100.0, 1.0], [8300.0, 1.0], [8500.0, 1.0], [9100.0, 1.0], [9300.0, 1.0], [9600.0, 1.0], [9400.0, 1.0], [10400.0, 1.0], [10800.0, 1.0], [10900.0, 1.0], [13600.0, 1.0], [14300.0, 1.0], [17000.0, 1.0], [17300.0, 1.0], [19600.0, 1.0], [100.0, 10.0], [28500.0, 1.0], [28200.0, 1.0], [28600.0, 1.0], [29200.0, 2.0], [28700.0, 1.0], [31000.0, 1.0], [200.0, 8.0], [56700.0, 1.0], [300.0, 5.0], [400.0, 5.0], [500.0, 2.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 97.0], [8400.0, 1.0], [9100.0, 1.0], [600.0, 1.0], [9300.0, 3.0], [9500.0, 1.0], [9400.0, 1.0], [700.0, 2.0], [800.0, 3.0], [14000.0, 1.0], [14200.0, 1.0], [900.0, 2.0], [1000.0, 2.0], [15900.0, 1.0], [1100.0, 6.0], [1200.0, 2.0], [1300.0, 5.0], [100.0, 22.0], [1700.0, 1.0], [1800.0, 2.0], [1900.0, 2.0], [2100.0, 1.0], [2700.0, 1.0], [3100.0, 2.0], [200.0, 15.0], [3300.0, 1.0], [3400.0, 1.0], [4000.0, 1.0], [300.0, 24.0], [6200.0, 1.0], [400.0, 2.0], [500.0, 4.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[200.0, 14.0], [57100.0, 1.0], [300.0, 5.0], [400.0, 2.0], [500.0, 3.0], [600.0, 4.0], [800.0, 4.0], [900.0, 2.0], [1000.0, 3.0], [1100.0, 4.0], [1200.0, 1.0], [1300.0, 2.0], [1400.0, 1.0], [1500.0, 3.0], [1600.0, 4.0], [1700.0, 1.0], [1800.0, 3.0], [1900.0, 5.0], [2100.0, 1.0], [2200.0, 3.0], [2300.0, 3.0], [2400.0, 5.0], [2500.0, 3.0], [2600.0, 4.0], [2800.0, 3.0], [2700.0, 2.0], [3000.0, 3.0], [3100.0, 2.0], [3200.0, 1.0], [3300.0, 3.0], [3400.0, 3.0], [3500.0, 1.0], [3600.0, 6.0], [3700.0, 3.0], [3800.0, 3.0], [3900.0, 1.0], [4000.0, 5.0], [4100.0, 3.0], [4200.0, 1.0], [4600.0, 2.0], [4500.0, 1.0], [4400.0, 1.0], [4700.0, 2.0], [4800.0, 3.0], [5100.0, 3.0], [5000.0, 1.0], [4900.0, 1.0], [5300.0, 3.0], [5200.0, 2.0], [5600.0, 2.0], [5400.0, 2.0], [5500.0, 1.0], [5700.0, 5.0], [5800.0, 1.0], [6000.0, 1.0], [6100.0, 1.0], [6200.0, 2.0], [6300.0, 2.0], [6500.0, 1.0], [6600.0, 1.0], [6400.0, 2.0], [6800.0, 3.0], [6700.0, 1.0], [7100.0, 1.0], [7000.0, 3.0], [7300.0, 1.0], [7500.0, 1.0], [7600.0, 2.0], [8100.0, 2.0], [8000.0, 1.0], [8600.0, 3.0], [8200.0, 1.0], [9100.0, 1.0], [9500.0, 1.0], [9300.0, 1.0], [9800.0, 1.0], [10500.0, 1.0], [11000.0, 1.0], [10900.0, 2.0], [11300.0, 1.0], [11600.0, 1.0], [11800.0, 1.0], [11900.0, 1.0], [12600.0, 1.0], [13900.0, 1.0], [14500.0, 3.0], [14800.0, 1.0], [16100.0, 1.0], [17200.0, 1.0], [17100.0, 1.0], [17400.0, 1.0], [19700.0, 1.0], [28600.0, 1.0], [28500.0, 1.0], [29300.0, 1.0], [29100.0, 1.0], [29700.0, 1.0], [30000.0, 1.0], [31400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 57100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 74.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 347.0, "series": [{"data": [[0.0, 209.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 74.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 347.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 41.991853360488804, "minX": 1.6950693E12, "maxY": 51.15827338129496, "series": [{"data": [[1.69506936E12, 41.991853360488804], [1.6950693E12, 51.15827338129496]], "isOverall": false, "label": "ThreadLoadTestRokomari", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69506936E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 63.0, "minX": 1.0, "maxY": 19226.333333333336, "series": [{"data": [[2.0, 9685.666666666668], [3.0, 9730.666666666668], [4.0, 208.0], [5.0, 220.0], [6.0, 9961.666666666666], [7.0, 17778.0], [8.0, 9645.0], [9.0, 4880.0], [10.0, 196.0], [11.0, 8087.333333333333], [12.0, 3518.0], [13.0, 325.0], [14.0, 239.0], [15.0, 248.0], [16.0, 1054.0], [17.0, 2207.5], [18.0, 980.0], [19.0, 2704.0], [20.0, 3926.0], [21.0, 1129.0], [22.0, 313.0], [23.0, 2500.0], [24.0, 5211.5], [25.0, 1120.0], [26.0, 10923.0], [27.0, 4968.5], [28.0, 1460.0], [29.0, 5724.0], [30.0, 535.0], [31.0, 10306.5], [33.0, 6394.0], [32.0, 4744.5], [35.0, 2503.0], [34.0, 366.0], [37.0, 7370.0], [36.0, 3230.0], [39.0, 2379.0], [38.0, 916.6666666666666], [41.0, 1486.6666666666665], [40.0, 2773.0], [42.0, 3309.0], [43.0, 4975.333333333333], [45.0, 5331.5], [47.0, 3206.5], [46.0, 4554.0], [49.0, 2943.0], [48.0, 1520.0], [50.0, 3815.3333333333335], [51.0, 4793.833333333334], [52.0, 5306.833333333333], [53.0, 3716.5], [54.0, 3151.0], [55.0, 5861.0], [56.0, 3654.0], [57.0, 2592.0], [59.0, 5969.5], [58.0, 5567.875], [61.0, 4121.285714285715], [60.0, 2614.2], [63.0, 4774.916666666667], [62.0, 4102.0], [67.0, 2938.5], [66.0, 3085.5714285714284], [65.0, 4627.153846153846], [64.0, 3106.0], [70.0, 1605.0], [69.0, 1526.75], [68.0, 2774.8571428571427], [1.0, 19035.333333333336]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[44.01428571428571, 4663.9285714285725]], "isOverall": false, "label": "HTTP Request-1-Aggregated", "isController": false}, {"data": [[2.0, 493.66666666666663], [3.0, 151.33333333333334], [4.0, 65.0], [5.0, 63.0], [6.0, 222.0], [7.0, 198.6], [8.0, 90.0], [9.0, 196.0], [10.0, 64.0], [11.0, 761.0], [12.0, 86.0], [13.0, 14233.0], [14.0, 63.0], [15.0, 122.0], [16.0, 726.2], [17.0, 205.0], [18.0, 65.0], [19.0, 304.5], [20.0, 985.0], [21.0, 70.0], [22.0, 287.0], [23.0, 73.0], [24.0, 110.0], [25.0, 73.0], [26.0, 73.0], [27.0, 73.5], [28.0, 227.0], [29.0, 73.0], [30.0, 78.0], [31.0, 92.0], [33.0, 73.0], [32.0, 186.0], [35.0, 249.0], [34.0, 65.0], [37.0, 310.0], [36.0, 190.0], [39.0, 73.0], [38.0, 5360.666666666666], [41.0, 147.0], [40.0, 297.5], [42.0, 79.0], [43.0, 5114.666666666667], [45.0, 2595.0], [47.0, 434.75], [46.0, 304.0], [49.0, 1214.0], [48.0, 72.0], [50.0, 3255.666666666667], [51.0, 253.33333333333331], [52.0, 1703.5], [53.0, 73.5], [54.0, 352.0], [55.0, 775.0], [56.0, 81.33333333333333], [57.0, 77.0], [59.0, 75.5], [58.0, 2064.3750000000005], [61.0, 1056.142857142857], [60.0, 1981.2], [63.0, 549.7499999999999], [62.0, 612.5], [67.0, 646.625], [66.0, 937.5714285714284], [65.0, 906.7692307692307], [64.0, 2507.25], [70.0, 80.0], [69.0, 453.0], [68.0, 255.14285714285717], [1.0, 191.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[44.01428571428571, 937.3714285714296]], "isOverall": false, "label": "HTTP Request-0-Aggregated", "isController": false}, {"data": [[2.0, 10179.666666666668], [3.0, 9882.333333333332], [4.0, 273.0], [5.0, 283.0], [6.0, 10183.666666666666], [7.0, 17976.8], [8.0, 9735.0], [9.0, 5076.0], [10.0, 260.0], [11.0, 8848.333333333334], [12.0, 3604.0], [13.0, 14559.0], [14.0, 302.0], [15.0, 370.0], [16.0, 1780.4], [17.0, 2413.5], [18.0, 1045.0], [19.0, 3008.5], [20.0, 4911.0], [21.0, 1199.0], [22.0, 600.0], [23.0, 2573.0], [24.0, 5322.5], [25.0, 1193.0], [26.0, 10996.0], [27.0, 5042.0], [28.0, 1688.0], [29.0, 5797.0], [30.0, 613.0], [31.0, 10398.5], [33.0, 6467.0], [32.0, 4930.5], [35.0, 2752.0], [34.0, 431.0], [37.0, 7680.0], [36.0, 3420.0], [39.0, 2452.0], [38.0, 6277.333333333334], [41.0, 1634.0], [40.0, 3070.5], [42.0, 3388.0], [43.0, 10090.0], [45.0, 7926.5], [47.0, 3641.25], [46.0, 4858.0], [49.0, 4157.0], [48.0, 1592.0], [50.0, 7071.0], [51.0, 5047.166666666667], [52.0, 7011.0], [53.0, 3790.0], [54.0, 3503.0], [55.0, 6636.0], [56.0, 3735.333333333333], [57.0, 2669.0], [59.0, 6045.5], [58.0, 7632.437499999999], [61.0, 5177.857142857143], [60.0, 4595.4], [63.0, 5324.75], [62.0, 4714.5], [67.0, 3585.2499999999995], [66.0, 4023.142857142857], [65.0, 5534.076923076924], [64.0, 5613.25], [70.0, 1685.0], [69.0, 1979.75], [68.0, 3030.142857142857], [1.0, 19226.333333333336]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[44.01428571428571, 5601.442857142858]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 70.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 334.26666666666665, "minX": 1.6950693E12, "maxY": 3175386.466666667, "series": [{"data": [[1.69506936E12, 3175386.466666667], [1.6950693E12, 509645.56666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69506936E12, 1345.7333333333333], [1.6950693E12, 334.26666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69506936E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 472.00000000000006, "minX": 1.6950693E12, "maxY": 6202.32596685083, "series": [{"data": [[1.69506936E12, 5156.027624309394], [1.6950693E12, 1592.551724137931]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.69506936E12, 1229.5813953488375], [1.6950693E12, 472.00000000000006]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.69506936E12, 6202.32596685083], [1.6950693E12, 1851.1034482758619]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69506936E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 163.17241379310343, "minX": 1.6950693E12, "maxY": 1229.5813953488375, "series": [{"data": [[1.69506936E12, 220.01104972375697], [1.6950693E12, 163.17241379310343]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.69506936E12, 1229.5813953488375], [1.6950693E12, 471.6419753086419]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.69506936E12, 1046.1767955801101], [1.6950693E12, 257.27586206896547]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69506936E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6950693E12, "maxY": 840.1937984496125, "series": [{"data": [[1.69506936E12, 0.0], [1.6950693E12, 0.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.69506936E12, 840.1937984496125], [1.6950693E12, 266.01234567901224]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.69506936E12, 702.4806629834255], [1.6950693E12, 95.9655172413793]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69506936E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 62.0, "minX": 1.6950693E12, "maxY": 57143.0, "series": [{"data": [[1.69506936E12, 57143.0], [1.6950693E12, 3838.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69506936E12, 62.0], [1.6950693E12, 71.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69506936E12, 9560.800000000001], [1.6950693E12, 2470.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69506936E12, 30102.559999999983], [1.6950693E12, 3788.399999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69506936E12, 2754.0], [1.6950693E12, 858.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69506936E12, 15992.199999999995], [1.6950693E12, 2808.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69506936E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 198.0, "minX": 2.0, "maxY": 14403.0, "series": [{"data": [[32.0, 1888.5], [33.0, 4041.0], [8.0, 259.0], [2.0, 14403.0], [34.0, 3992.0], [10.0, 198.0], [40.0, 2670.5], [12.0, 1639.5], [16.0, 2162.5], [18.0, 229.0], [19.0, 2310.0], [5.0, 348.0], [22.0, 4802.0], [6.0, 269.0], [25.0, 1830.0], [26.0, 687.0], [27.0, 831.5], [28.0, 3189.5], [30.0, 6009.0], [31.0, 1045.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 86.0, "minX": 2.0, "maxY": 293.0, "series": [{"data": [[32.0, 129.5], [33.0, 146.0], [8.0, 90.0], [2.0, 100.5], [34.0, 222.0], [10.0, 193.0], [40.0, 210.0], [12.0, 287.5], [16.0, 134.5], [18.0, 86.0], [19.0, 293.0], [5.0, 132.0], [22.0, 166.5], [6.0, 113.0], [25.0, 133.0], [26.0, 141.0], [27.0, 180.5], [28.0, 197.5], [30.0, 167.0], [31.0, 186.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.583333333333333, "minX": 1.6950693E12, "maxY": 5.916666666666667, "series": [{"data": [[1.69506936E12, 5.916666666666667], [1.6950693E12, 4.583333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69506936E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.9666666666666667, "minX": 1.6950693E12, "maxY": 6.033333333333333, "series": [{"data": [[1.69506936E12, 6.033333333333333], [1.6950693E12, 0.9666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69506936E12, 2.15], [1.6950693E12, 1.35]], "isOverall": false, "label": "301", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69506936E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.6950693E12, "maxY": 3.0166666666666666, "series": [{"data": [[1.69506936E12, 3.0166666666666666], [1.6950693E12, 0.48333333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69506936E12, 2.15], [1.6950693E12, 1.35]], "isOverall": false, "label": "HTTP Request-0-success", "isController": false}, {"data": [[1.69506936E12, 3.0166666666666666], [1.6950693E12, 0.48333333333333334]], "isOverall": false, "label": "HTTP Request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69506936E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.316666666666667, "minX": 1.6950693E12, "maxY": 8.183333333333334, "series": [{"data": [[1.69506936E12, 8.183333333333334], [1.6950693E12, 2.316666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69506936E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

